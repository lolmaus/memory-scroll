{"version":3,"sources":["dummy/tests/app.jshint.js","dummy/tests/controllers/index.jshint.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jshint.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/integration/components/memory-scroll-test.js","dummy/tests/integration/components/memory-scroll-test.jshint.js","dummy/tests/integration/components/remember-document-scroll-test.js","dummy/tests/integration/components/remember-document-scroll-test.jshint.js","dummy/tests/integration/components/scroll-to-test.js","dummy/tests/integration/components/scroll-to-test.jshint.js","dummy/tests/resolver.jshint.js","dummy/tests/router.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/transitions.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _dummyTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/memory-scroll-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('memory-scroll', 'Integration | Component | memory scroll', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it preserves scroll position when component is replaced', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        var child0 = (function () {\n          return {\n            meta: {\n              'fragmentReason': false,\n              'revision': 'Ember@2.6.2',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 13,\n                  'column': 6\n                },\n                'end': {\n                  'line': 17,\n                  'column': 6\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode('        ');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement('div');\n              var el2 = dom.createTextNode('\\n          sample content\\n        ');\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode('\\n');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes() {\n              return [];\n            },\n            statements: [],\n            locals: [],\n            templates: []\n          };\n        })();\n\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 12,\n                'column': 4\n              },\n              'end': {\n                'line': 18,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['block', 'memory-scroll', [], ['key', 'sample', 'class', 'sample'], 0, null, ['loc', [null, [13, 6], [17, 24]]]]],\n          locals: [],\n          templates: [child0]\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 19,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('style');\n          dom.setAttribute(el1, 'type', 'text/css');\n          var el2 = dom.createTextNode('\\n      .sample {\\n        height: 30px;\\n        overflow-y: scroll;\\n      }\\n      .sample > div {\\n        height: 100px;\\n      }\\n    ');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'if', [['get', 'showIt', ['loc', [null, [12, 10], [12, 16]]]]], [], 0, null, ['loc', [null, [12, 4], [18, 11]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    this.set('showIt', true);\n    assert.equal(this.$('.sample').text().trim(), 'sample content');\n    this.$('.sample').scrollTop(50);\n    this.set('showIt', false);\n    assert.equal(this.$('.sample').length, 0);\n    this.set('showIt', true);\n    assert.equal(this.$('.sample').scrollTop(), 50);\n  });\n\n  (0, _emberQunit.test)('it preserves independent scroll positions per key when component is replaced', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        var child0 = (function () {\n          return {\n            meta: {\n              'fragmentReason': false,\n              'revision': 'Ember@2.6.2',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 13,\n                  'column': 6\n                },\n                'end': {\n                  'line': 17,\n                  'column': 6\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode('        ');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement('div');\n              var el2 = dom.createTextNode('\\n          sample content\\n        ');\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode('\\n');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes() {\n              return [];\n            },\n            statements: [],\n            locals: [],\n            templates: []\n          };\n        })();\n\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 12,\n                'column': 4\n              },\n              'end': {\n                'line': 18,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['block', 'memory-scroll', [], ['key', ['subexpr', '@mut', [['get', 'showIt', ['loc', [null, [13, 27], [13, 33]]]]], [], []], 'class', 'sample'], 0, null, ['loc', [null, [13, 6], [17, 24]]]]],\n          locals: [],\n          templates: [child0]\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 19,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('style');\n          dom.setAttribute(el1, 'type', 'text/css');\n          var el2 = dom.createTextNode('\\n      .sample {\\n        height: 30px;\\n        overflow-y: scroll;\\n      }\\n      .sample > div {\\n        height: 100px;\\n      }\\n    ');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'if', [['get', 'showIt', ['loc', [null, [12, 10], [12, 16]]]]], [], 0, null, ['loc', [null, [12, 4], [18, 11]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    this.set('showIt', 'first');\n    assert.equal(this.$('.sample').text().trim(), 'sample content');\n    this.$('.sample').scrollTop(50);\n    this.set('showIt', false);\n    assert.equal(this.$('.sample').length, 0);\n    this.set('showIt', 'second');\n    assert.equal(this.$('.sample').scrollTop(), 0);\n    this.set('showIt', false);\n    this.set('showIt', 'first');\n    assert.equal(this.$('.sample').scrollTop(), 50);\n  });\n\n  (0, _emberQunit.test)('it preserves independent scroll positions per key when key changes', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        var child0 = (function () {\n          return {\n            meta: {\n              'fragmentReason': false,\n              'revision': 'Ember@2.6.2',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 13,\n                  'column': 6\n                },\n                'end': {\n                  'line': 17,\n                  'column': 6\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode('        ');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement('div');\n              var el2 = dom.createTextNode('\\n          sample content\\n        ');\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode('\\n');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes() {\n              return [];\n            },\n            statements: [],\n            locals: [],\n            templates: []\n          };\n        })();\n\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 12,\n                'column': 4\n              },\n              'end': {\n                'line': 18,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['block', 'memory-scroll', [], ['key', ['subexpr', '@mut', [['get', 'showIt', ['loc', [null, [13, 27], [13, 33]]]]], [], []], 'class', 'sample'], 0, null, ['loc', [null, [13, 6], [17, 24]]]]],\n          locals: [],\n          templates: [child0]\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 19,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('style');\n          dom.setAttribute(el1, 'type', 'text/css');\n          var el2 = dom.createTextNode('\\n      .sample {\\n        height: 30px;\\n        overflow-y: scroll;\\n      }\\n      .sample > div {\\n        height: 100px;\\n      }\\n    ');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'if', [['get', 'showIt', ['loc', [null, [12, 10], [12, 16]]]]], [], 0, null, ['loc', [null, [12, 4], [18, 11]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    this.set('showIt', 'first');\n    assert.equal(this.$('.sample').text().trim(), 'sample content');\n    this.$('.sample').scrollTop(50);\n    this.set('showIt', 'second');\n    assert.equal(this.$('.sample').scrollTop(), 0);\n    this.set('showIt', 'first');\n    assert.equal(this.$('.sample').scrollTop(), 50);\n  });\n});","define('dummy/tests/integration/components/memory-scroll-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/memory-scroll-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/memory-scroll-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/remember-document-scroll-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  (0, _emberQunit.moduleForComponent)('remember-document-scroll', 'Integration | Component | remember document scroll', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it controls document scroll position', function (assert) {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 8,\n                'column': 4\n              },\n              'end': {\n                'line': 10,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['inline', 'remember-document-scroll', [], ['key', ['subexpr', '@mut', [['get', 'showIt', ['loc', [null, [9, 37], [9, 43]]]]], [], []]], ['loc', [null, [9, 6], [9, 45]]]]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 11,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('style');\n          dom.setAttribute(el1, 'type', 'text/css');\n          var el2 = dom.createTextNode('\\n      body {\\n        height: 30000px;\\n      }\\n    ');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'if', [['get', 'showIt', ['loc', [null, [8, 10], [8, 16]]]]], [], 0, null, ['loc', [null, [8, 4], [10, 11]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    this.set('showIt', 'first');\n    _ember['default'].$(document).scrollTop(50);\n    this.set('showIt', false);\n    _ember['default'].$(document).scrollTop(0);\n    this.set('showIt', 'first');\n    assert.equal(_ember['default'].$(document).scrollTop(), 50);\n  });\n});","define('dummy/tests/integration/components/remember-document-scroll-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/remember-document-scroll-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/remember-document-scroll-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/scroll-to-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForComponent)('scroll-to', 'Integration | Component | scroll to', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it scrolls document at initial render', function (assert) {\n    var doc = _ember['default'].$(document);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 8,\n                'column': 4\n              },\n              'end': {\n                'line': 10,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['inline', 'scroll-to', [], ['position', 17], ['loc', [null, [9, 6], [9, 31]]]]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 11,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('style');\n          dom.setAttribute(el1, 'type', 'text/css');\n          var el2 = dom.createTextNode('\\n      body {\\n        height: 30000px;\\n      }\\n    ');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'if', [['get', 'showIt', ['loc', [null, [8, 10], [8, 16]]]]], [], 0, null, ['loc', [null, [8, 4], [10, 11]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    this.set('showIt', 'first');\n    assert.equal(doc.scrollTop(), 17);\n  });\n\n  (0, _emberQunit.test)('it scrolls document at initial render with key', function (assert) {\n    var doc = _ember['default'].$(document);\n    this.set('key', 1);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 8,\n                'column': 4\n              },\n              'end': {\n                'line': 10,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['inline', 'scroll-to', [], ['position', 17, 'key', ['subexpr', '@mut', [['get', 'key', ['loc', [null, [9, 34], [9, 37]]]]], [], []]], ['loc', [null, [9, 6], [9, 39]]]]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 11,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('style');\n          dom.setAttribute(el1, 'type', 'text/css');\n          var el2 = dom.createTextNode('\\n      body {\\n        height: 30000px;\\n      }\\n    ');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'if', [['get', 'showIt', ['loc', [null, [8, 10], [8, 16]]]]], [], 0, null, ['loc', [null, [8, 4], [10, 11]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    this.set('showIt', 'first');\n    assert.equal(doc.scrollTop(), 17);\n  });\n\n  (0, _emberQunit.test)('it scrolls document when key changes', function (assert) {\n    var doc = _ember['default'].$(document);\n    this.set('key', 1);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 8,\n                'column': 4\n              },\n              'end': {\n                'line': 10,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['inline', 'scroll-to', [], ['position', 17, 'key', ['subexpr', '@mut', [['get', 'key', ['loc', [null, [9, 34], [9, 37]]]]], [], []]], ['loc', [null, [9, 6], [9, 39]]]]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['multiple-nodes', 'wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 11,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('style');\n          dom.setAttribute(el1, 'type', 'text/css');\n          var el2 = dom.createTextNode('\\n      body {\\n        height: 30000px;\\n      }\\n    ');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'if', [['get', 'showIt', ['loc', [null, [8, 10], [8, 16]]]]], [], 0, null, ['loc', [null, [8, 4], [10, 11]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    this.set('showIt', 'first');\n    doc.scrollTop(0);\n    this.set('key', 2);\n    assert.equal(doc.scrollTop(), 17);\n  });\n});","define('dummy/tests/integration/components/scroll-to-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/scroll-to-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/scroll-to-test.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/transitions.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transitions.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvbzjTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}